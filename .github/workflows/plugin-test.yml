name: Claude Code Plugin Test

on:
  push:
    branches: [ main, master ]
    paths:
      - '.claude-plugin/marketplace.json'
      - 'plugins/**'
      - '.github/workflows/plugin-test.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - '.claude-plugin/marketplace.json'
      - 'plugins/**'
      - '.github/workflows/plugin-test.yml'
  workflow_dispatch:

env:
  NODE_VERSION: 24

jobs:
  plugin-test:
    name: Claude Code Plugin Test
    runs-on: ubuntu-latest
    environment: cc
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    strategy:
      matrix:
        node-version: [24]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code
          claude --version

      - name: Verify Claude Code installation
        run: |
          claude --help
          claude --version

      - name: Validate marketplace.json schema
        run: |
          echo "[CHECK] Validating marketplace.json schema..."
          if [ ! -f ".claude-plugin/marketplace.json" ]; then
            echo "[ERROR] marketplace.json not found"
            exit 1
          fi

          # Basic JSON validation
          jq empty .claude-plugin/marketplace.json
          if [ $? -ne 0 ]; then
            echo "[ERROR] marketplace.json is not valid JSON"
            exit 1
          fi

          echo "[OK] marketplace.json schema is valid"

      - name: Setup Environment Variables
        run: |
          echo "[SETUP] Setting up environment variables for Claude Code..."

          # Check required environment variables
          if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "[ERROR] ANTHROPIC_API_KEY is not set in cc environment secrets"
            echo "Please add ANTHROPIC_API_KEY secret in GitHub Settings > Environments > cc"
            exit 1
          fi

          # Set environment variables for Claude Code
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
          if [ -n "${{ secrets.ANTHROPIC_BASE_URL }}" ]; then
            echo "ANTHROPIC_BASE_URL=${{ secrets.ANTHROPIC_BASE_URL }}" >> $GITHUB_ENV
            echo "[LINK] Using custom API Base URL from cc environment: ${{ secrets.ANTHROPIC_BASE_URL }}"
          else
            echo "ANTHROPIC_BASE_URL=https://api.anthropic.com" >> $GITHUB_ENV
            echo "[LINK] Using default API Base URL"
          fi

          echo "OK Environment variables setup completed"
          echo "API Key: ${{ secrets.ANTHROPIC_API_KEY:0:10 }}..."

      - name: Test Plugin Installation
        id: plugin-install
        run: |
          echo "[START] Testing plugin installation..."

          # Create a test directory
          mkdir -p /tmp/claude-test
          cd /tmp/claude-test

          # Initialize Claude Code
          echo "[INFO] Initializing Claude Code test environment..."

          # Install plugin from our repository
          echo "[INSTALL] Installing plugin from $GITHUB_WORKSPACE..."
          claude plugin install $GITHUB_WORKSPACE || {
            echo "[ERROR] Plugin installation failed"
            exit 1
          }

          echo "[OK] Plugin installation successful"

          # List installed plugins
          echo "[LIST] Installed plugins:"
          claude plugin list

          # Save plugin list for verification
          claude plugin list > /tmp/installed-plugins.txt

          # Set output for verification
          echo "PLUGIN_INSTALL_SUCCESS=true" >> $GITHUB_OUTPUT

      - name: Test Plugin Functionality
        if: steps.plugin-install.outputs.PLUGIN_INSTALL_SUCCESS == 'true'
        run: |
          echo "[TEST] Testing plugin functionality..."

          cd /tmp/claude-test

          # Test basic plugin commands
          echo "Testing plugin basic functionality..."

          # Test if plugins are properly loaded
          if [ -f "/tmp/installed-plugins.txt" ]; then
            echo "[OK] Plugin list saved successfully"
            echo "[FILE] Plugin list content:"
            cat /tmp/installed-plugins.txt
          else
            echo "[ERROR] Plugin list not found"
            exit 1
          fi

      - name: Test Plugin Validation
        run: |
          echo "[CHECK] Testing plugin validation..."

          cd $GITHUB_WORKSPACE

          # Run the test script if it exists
          if [ -f "scripts/test-plugin.sh" ]; then
            echo "Running local test script..."
            chmod +x scripts/test-plugin.sh
            ./scripts/test-plugin.sh || {
              echo "[ERROR] Test script failed"
              exit 1
            }
            echo "[OK] Test script passed"
          else
            echo "[WARN] Test script not found, skipping"
          fi

      - name: Test Evolutionary Biology Expert Plugin
        run: |
          echo "[BIO] Testing evolutionary biology expert plugin..."

          cd /tmp/claude-test

          # Test specific plugin functionality
          echo "Testing evolutionary-biology-expert plugin..."

          # Check if plugin files exist in the workspace
          if [ -d "$GITHUB_WORKSPACE/plugins/evolutionary-biology-expert" ]; then
            echo "[OK] Plugin directory exists"

            # Check for required files
            if [ -f "$GITHUB_WORKSPACE/plugins/evolutionary-biology-expert/agents/evolutionary-biology-analyst.md" ]; then
              echo "[OK] Agent file exists"
            else
              echo "[ERROR] Agent file missing"
            fi

            if [ -f "$GITHUB_WORKSPACE/plugins/evolutionary-biology-expert/templates/expert_analysis_report_template.md" ]; then
              echo "[OK] Template file exists"
            else
              echo "[ERROR] Template file missing"
            fi

            # Count skills
            skill_count=$(find "$GITHUB_WORKSPACE/plugins/evolutionary-biology-expert/skills" -name "SKILL.md" | wc -l)
            echo "[DOCS] Found $skill_count skills"
          else
            echo "[ERROR] Plugin directory not found"
            exit 1
          fi

      - name: Configure Claude Code
        run: |
          echo "[CONFIG] Configuring Claude Code..."

          mkdir -p ~/.claude
          cat > ~/.claude/config.json << EOF
          {
            "defaultModel": "claude-3-5-sonnet-20241022",
            "apiKeys": {
              "anthropic": "${{ secrets.ANTHROPIC_API_KEY }}"
            },
            "allowedTools": [
              "Read", "Write", "Edit", "Bash", "Task",
              "WebSearch", "WebFetch",
              "mcp__sequentialthinking__sequentialthinking",
              "mcp__article_mcp__search_literature",
              "mcp__article_mcp__get_article_details",
              "mcp__article_mcp__get_references",
              "mcp__genome-mcp__get_data",
              "mcp__context7__resolve-library-id",
              "mcp__context7__get-library-docs"
            ],
            "env": {
              "ANTHROPIC_DEFAULT_HAIKU_MODEL": "glm-4.6",
              "ANTHROPIC_DEFAULT_SONNET_MODEL": "glm-4.6",
              "ANTHROPIC_DEFAULT_OPUS_MODEL": "glm-4.6",
              "ANTHROPIC_BASE_URL": "${{ secrets.ANTHROPIC_BASE_URL || 'https://api.anthropic.com' }}"
            },
            "enabledPlugins": {
              "document-skills@anthropic-agent-skills": true,
              "agent-sdk-dev@claude-code-plugins": true,
              "pr-review-toolkit@claude-code-plugins": true,
              "commit-commands@claude-code-plugins": true,
              "evolutionary-biology-expert@cc_plugins": true
            },
            "alwaysThinkingEnabled": false
          }
          EOF

          echo "[OK] Claude Code configuration completed"

      - name: Run Basic Plugin Tests
        run: |
          echo "[TEST] Running basic plugin tests..."

          cd /tmp/claude-test

          # Test basic claude command
          if claude --version > /dev/null 2>&1; then
            echo "[OK] Claude Code CLI is working"
          else
            echo "[ERROR] Claude Code CLI is not working"
            exit 1
          fi

          # Test plugin list
          echo "[LIST] Checking installed plugins:"
          claude plugin list || echo "No plugins found"

          echo "[OK] Basic plugin tests completed"

      - name: Test Plugin Uninstallation
        if: always()
        run: |
          echo "[DELETE] Testing plugin uninstallation..."

          cd /tmp/claude-test

          # Uninstall plugins
          claude plugin uninstall all || echo "[WARN] Some plugins might not have uninstalled properly"

          # Verify plugins are uninstalled
          echo "[LIST] Remaining plugins after uninstallation:"
          claude plugin list || echo "No plugins installed"

          echo "[OK] Plugin uninstallation test completed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run security scan
        run: |
          echo "[SECURE] Running security scan..."

          # Check for sensitive files
          if find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "id_rsa*" 2>/dev/null | grep -q .; then
            echo "[ERROR] Sensitive files found"
            exit 1
          fi

          # Check for hardcoded secrets
          if grep -r "sk-ant-" . --exclude-dir=.git 2>/dev/null | grep -q .; then
            echo "[ERROR] Potential API keys found"
            exit 1
          fi

          echo "[OK] Security scan passed"