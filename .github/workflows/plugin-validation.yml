name: Enhanced Plugin Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - '.claude-plugin/**'
      - 'plugins/**'
      - '.github/workflows/plugin-validation.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '.claude-plugin/**'
      - 'plugins/**'
  workflow_dispatch:

jobs:
  validate:
    name: Comprehensive Plugin Validation
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        plugin: [evolutionary-biology-expert, hybrid-speciation-expert,
                 crop-breeding-expert, evolutionary-ecology-expert]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip jq
        pip3 install jsonschema

    - name: Install Claude Code CLI
      run: |
        npm install -g @anthropic-ai/claude-code
        echo "$(npm config get prefix)/bin" >> $GITHUB_PATH

    - name: Validate marketplace.json
      id: marketplace-validation
      run: |
        echo "🔍 Validating marketplace.json..."
        if claude plugin validate .claude-plugin/marketplace.json; then
          echo "✅ marketplace.json validation passed"
          echo "marketplace_valid=true" >> $GITHUB_OUTPUT
        else
          echo "❌ marketplace.json validation failed"
          echo "marketplace_valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Validate Plugin Structure
      id: structure-validation
      run: |
        plugin_path="plugins/${{ matrix.plugin }}"
        echo "🔍 Validating plugin structure: $plugin_path"

        # 检查插件目录是否存在
        if [[ ! -d "$plugin_path" ]]; then
          echo "❌ Plugin directory does not exist: $plugin_path"
          echo "structure_valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi

        structure_valid=true

        # 检查必需文件
        required_files=("plugin.json" "README.md")
        for file in "${required_files[@]}"; do
          if [[ ! -f "$plugin_path/$file" ]]; then
            echo "❌ Missing required file: $file"
            structure_valid=false
          else
            echo "✅ Found required file: $file"
          fi
        done

        # 检查必需目录
        required_dirs=("agents" "skills")
        for dir in "${required_dirs[@]}"; do
          if [[ ! -d "$plugin_path/$dir" ]]; then
            echo "❌ Missing required directory: $dir"
            structure_valid=false
          else
            echo "✅ Found required directory: $dir"
            # 检查目录是否为空
            if [[ -z "$(ls -A $plugin_path/$dir)" ]]; then
              echo "⚠️  Directory is empty: $dir"
              structure_valid=false
            fi
          fi
        done

        # 检查可选但推荐的目录
        optional_dirs=("commands" "templates")
        for dir in "${optional_dirs[@]}"; do
          if [[ -d "$plugin_path/$dir" ]]; then
            echo "✅ Found optional directory: $dir"
          else
            echo "ℹ️  Optional directory not found: $dir"
          fi
        done

        if [[ "$structure_valid" == "true" ]]; then
          echo "✅ Plugin structure validation passed"
        else
          echo "❌ Plugin structure validation failed"
          echo "structure_valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi

        echo "structure_valid=true" >> $GITHUB_OUTPUT

    - name: Validate Plugin Configuration
      id: config-validation
      run: |
        plugin_path="plugins/${{ matrix.plugin }}"
        echo "🔍 Validating plugin configuration..."

        # 验证 plugin.json 格式
        if jq empty "$plugin_path/plugin.json" 2>/dev/null; then
          echo "✅ plugin.json is valid JSON"
        else
          echo "❌ plugin.json is invalid JSON"
          echo "config_valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi

        # 检查必需字段
        required_fields=("name" "version" "description" "category")
        config_valid=true

        for field in "${required_fields[@]}"; do
          if jq -e ".$field" "$plugin_path/plugin.json" >/dev/null 2>&1; then
            echo "✅ Found required field: $field"
          else
            echo "❌ Missing required field: $field"
            config_valid=false
          fi
        done

        # 验证版本格式 (语义化版本)
        version=$(jq -r '.version' "$plugin_path/plugin.json" 2>/dev/null)
        if [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "✅ Version follows semantic versioning: $version"
        else
          echo "⚠️  Version may not follow semantic versioning: $version"
        fi

        if [[ "$config_valid" == "true" ]]; then
          echo "✅ Plugin configuration validation passed"
          echo "config_valid=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Plugin configuration validation failed"
          echo "config_valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Check File References
      id: reference-validation
      run: |
        echo "🔍 Checking file references..."

        # 创建引用检查脚本
        cat > check_references.py << 'EOF'
        import json
        import os
import sys
from pathlib import Path

def check_references():
    marketplace_path = Path(".claude-plugin/marketplace.json")
    if not marketplace_path.exists():
        print("❌ marketplace.json not found")
        return False

    with open(marketplace_path, 'r') as f:
        marketplace = json.load(f)

    all_valid = True
    base_path = Path(".")

    for plugin in marketplace.get('plugins', []):
        plugin_name = plugin.get('name', 'unknown')
        plugin_source = plugin.get('source', '').lstrip('./')
        plugin_path = base_path / plugin_source

        print(f"🔍 Checking references for plugin: {plugin_name}")

        # 检查 agents
        for agent in plugin.get('agents', []):
            agent_path = base_path / agent.lstrip('./')
            if agent_path.exists():
                print(f"✅ Agent file exists: {agent}")
            else:
                print(f"❌ Agent file missing: {agent}")
                all_valid = False

        # 检查 skills
        for skill in plugin.get('skills', []):
            skill_path = base_path / skill.lstrip('./')
            if skill_path.exists():
                print(f"✅ Skill file exists: {skill}")
            else:
                print(f"❌ Skill file missing: {skill}")
                all_valid = False

    return all_valid

if __name__ == "__main__":
    success = check_references()
    sys.exit(0 if success else 1)
        EOF

        if python3 check_references.py; then
          echo "✅ File references validation passed"
          echo "references_valid=true" >> $GITHUB_OUTPUT
        else
          echo "❌ File references validation failed"
          echo "references_valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Validate Content Quality
      id: content-validation
      run: |
        plugin_path="plugins/${{ matrix.plugin }}"
        echo "🔍 Validating content quality..."

        # 创建内容质量检查脚本
        cat > validate_content.py << 'EOF'
        import os
        import re
        from pathlib import Path

def validate_content(plugin_path):
    plugin_path = Path(plugin_path)
    if not plugin_path.exists():
        print(f"❌ Plugin path does not exist: {plugin_path}")
        return False

    all_valid = True

    # 检查 README.md 质量
    readme_path = plugin_path / "README.md"
    if readme_path.exists():
        with open(readme_path, 'r', encoding='utf-8') as f:
            readme_content = f.read()

        # 检查必需章节
        required_sections = ["##", "###"]
        found_sections = [section for section in required_sections
                         if section in readme_content]

        if len(found_sections) >= 1:
            print("✅ README.md has proper section structure")
        else:
            print("⚠️  README.md may need more sections")

        # 检查长度
        if len(readme_content.strip()) > 100:
            print("✅ README.md has sufficient content")
        else:
            print("⚠️  README.md seems too short")
    else:
        print("ℹ️  No README.md found")

    # 检查 agents 文件
    agents_dir = plugin_path / "agents"
    if agents_dir.exists():
        for agent_file in agents_dir.glob("*.md"):
            with open(agent_file, 'r', encoding='utf-8') as f:
                agent_content = f.read()

            # 检查是否包含工具调用
            if "tool_use" in agent_content or "Tool" in agent_content:
                print(f"✅ Agent file contains tool references: {agent_file.name}")
            else:
                print(f"⚠️  Agent file may lack tool definitions: {agent_file.name}")

    # 检查 skills 文件
    skills_dir = plugin_path / "skills"
    if skills_dir.exists():
        for skill_file in skills_dir.glob("*.md"):
            with open(skill_file, 'r', encoding='utf-8') as f:
                skill_content = f.read()

            # 检查技能文件结构
            if len(skill_content.strip()) > 50:
                print(f"✅ Skill file has sufficient content: {skill_file.name}")
            else:
                print(f"⚠️  Skill file seems too short: {skill_file.name}")

    print("✅ Content quality validation completed")
    return True

if __name__ == "__main__":
    plugin_path = sys.argv[1] if len(sys.argv) > 1 else "."
    success = validate_content(plugin_path)
    sys.exit(0 if success else 1)
        EOF

        if python3 validate_content.py "$plugin_path"; then
          echo "✅ Content quality validation passed"
          echo "content_valid=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Content quality validation failed"
          echo "content_valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Generate Validation Report
      if: always()
      run: |
        echo "## 📊 Plugin Validation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Plugin:** ${{ matrix.plugin }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 Marketplace: ${{ steps.marketplace-validation.outputs.marketplace_valid }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🏗️  Structure: ${{ steps.structure-validation.outputs.structure_valid }}" >> $GITHUB_STEP_SUMMARY
        echo "- ⚙️  Configuration: ${{ steps.config-validation.outputs.config_valid }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🔗 References: ${{ steps.reference-validation.outputs.references_valid }}" >> $GITHUB_STEP_SUMMARY
        echo "- 📝 Content: ${{ steps.content-validation.outputs.content_valid }}" >> $GITHUB_STEP_SUMMARY

  validate-integration:
    name: Integration Validation
    runs-on: ubuntu-latest
    needs: validate
    if: always() && needs.validate.result == 'success'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Claude Code CLI
      run: |
        npm install -g @anthropic-ai/claude-code
        echo "$(npm config get prefix)/bin" >> $GITHUB_PATH

    - name: Test Plugin Configuration Loading
      run: |
        echo "🔍 Testing plugin configuration loading..."

        # 检查是否能正确解析 marketplace.json
        if command -v jq >/dev/null 2>&1; then
          plugin_count=$(jq '.plugins | length' .claude-plugin/marketplace.json)
          echo "✅ Found $plugin_count plugins in marketplace.json"

          # 检查插件基本信息
          jq -r '.plugins[] | "✅ Plugin: \(.name) v\(.version) (\(.category))"' .claude-plugin/marketplace.json
        fi

    - name: Validate MCP Dependencies
      run: |
        echo "🔍 Validating MCP dependencies..."

        # 创建 MCP 依赖检查脚本
        cat > check_mcp_dependencies.py << 'EOF'
        import json
        import os
        from pathlib import Path

def check_mcp_dependencies():
    print("🔍 Checking MCP tool configurations...")

    # 检查各个插件目录下的 .mcp.json 文件
    plugins_base = Path("plugins")
    if not plugins_base.exists():
        print("ℹ️  No plugins directory found")
        return True

    all_valid = True

    for plugin_dir in plugins_base.iterdir():
        if plugin_dir.is_dir():
            mcp_config = plugin_dir / "tools" / ".mcp.json"
            if mcp_config.exists():
                print(f"✅ Found MCP config: {plugin_dir.name}/tools/.mcp.json")

                try:
                    with open(mcp_config, 'r') as f:
                        config = json.load(f)

                    # 检查基本结构
                    if isinstance(config, dict):
                        print(f"✅ MCP config has valid structure: {plugin_dir.name}")
                    else:
                        print(f"❌ MCP config invalid structure: {plugin_dir.name}")
                        all_valid = False

                except json.JSONDecodeError as e:
                    print(f"❌ MCP config invalid JSON in {plugin_dir.name}: {e}")
                    all_valid = False
            else:
                print(f"ℹ️  No MCP config found for: {plugin_dir.name}")

    print("✅ MCP dependency validation completed")
    return True

if __name__ == "__main__":
    success = check_mcp_dependencies()
    exit(0 if success else 1)
        EOF

        python3 check_mcp_dependencies.py

    - name: Integration Summary
      if: always()
      run: |
        echo "## 🎯 Integration Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**All plugins validated successfully!** ✅" >> $GITHUB_STEP_SUMMARY

  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [validate, validate-integration]
    if: always()

    steps:
    - name: Generate Final Report
      run: |
        echo "## 🏁 Complete Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Job Results" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 Individual Validation: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🔗 Integration Validation: ${{ needs.validate-integration.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.validate.result }}" == "success" && "${{ needs.validate-integration.result }}" == "success" ]]; then
          echo "🎉 **All validations passed! Plugin collection is ready for deployment.**" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️  **Some validations failed. Please review the detailed reports above.**" >> $GITHUB_STEP_SUMMARY
        fi
